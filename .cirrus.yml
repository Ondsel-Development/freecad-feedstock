macos_task:
    # Basic metadata:
    name: build_osx_arm64_python3.11.____cpython
    timeout_in: 90m

    # The build machine:
    macos_instance:
      image: ghcr.io/cirruslabs/macos-monterey-xcode:13

    # Environment variables:
    env:
      CONFIG: osx_arm64_python3.11.____cpython
      UPLOAD_PACKAGES: True

    # Instructions:
    osx_build_script: |
      export CI=cirrus
      export flow_run_id="cirrus_${CIRRUS_TASK_ID}"
      export remote_url=${CIRRUS_REPO_CLONE_URL}
      export OSX_FORCE_SDK_DOWNLOAD="1"
      export GIT_BRANCH=${CIRRUS_BASE_BRANCH}
      export FEEDSTOCK_NAME=$(basename ${CIRRUS_REPO_NAME})
      if [ -z "$CIRRUS_PR" ]; then
        export IS_PR_BUILD="False"
      else
        export IS_PR_BUILD="True"
      fi
      ./.scripts/run_osx_build.sh

linux_task:
    # Basic metadata:
    name: build_linux_aarch64_python3.11.____cpython
    timeout_in: 90m

    # The build machine:
    compute_engine_instance:
      image_project: cirrus-images
      image: family/docker-builder-arm64
      platform: linux
      architecture: arm64
      cpu: 8
      memory: 10G
      #disk: 100 # optional. By default, uses the smallest disk size required by the image.
      nested_virtualization: true

    # Environment variables:
    env:
      CONFIG: linux_aarch64_python3.11.____cpython
      UPLOAD_PACKAGES: True
      DOCKER_IMAGE: quay.io/condaforge/linux-anvil-aarch64

    # Instructions:
    docker_build_script: |
      export CI=cirrus
      export flow_run_id="cirrus_${CIRRUS_TASK_ID}"
      export remote_url=${CIRRUS_REPO_CLONE_URL}
      export GIT_BRANCH=${CIRRUS_BASE_BRANCH}
      export FEEDSTOCK_NAME=$(basename ${CIRRUS_REPO_NAME})
      if [ -z "$CIRRUS_PR" ]; then
        export IS_PR_BUILD="False"
      else
        export IS_PR_BUILD="True"
      fi
      ./.scripts/run_docker_build.sh